/*
  Min Number Of Coins For Change

  Given an array of positive integers representing coin denominations and a
  single non-negative integer  representing a target amount of
  money, write a function that returns the smallest number of coins needed to
  make change for (to sum up to) that target amount using the given coin
  denominations.

  Note that you have access to an unlimited amount of coins. In other words, if
  the denominations are , you have access to an unlimited
  amount of 1s, 5s, and 10s

  
  If it's impossible to make change for the target amount, return

  Sample input:
  "n": 7,
  "denoms": [1, 5, 10]

  Sample output:
  3 // 2x1 + 1x5
*/

function minCoinsToMakeChange(n, denoms) {
  // Inicializar una tabla para almacenar los resultados
  const dp = new Array(n + 1).fill(Infinity);

  // La cantidad de monedas necesarias para hacer cambio de 0 es 0
  dp[0] = 0;

  // Para cada denominaci√≥n de moneda
  for (const coin of denoms) {
    // Actualizar la tabla para valores mayores o iguales a la moneda
    for (let i = coin; i <= n; i++) {
      dp[i] = Math.min(dp[i], 1 + dp[i - coin]);
    }
  }

  // Si dp[n] sigue siendo infinito, no es posible hacer cambio
  return dp[n] === Infinity ? -1 : dp[n];
}

// Ejemplo de uso
const n = 7;
const denoms = [1, 5, 10];
const result = minCoinsToMakeChange(n, denoms);
console.log(result);  // Salida esperada: 3 (2x1 + 1x5)

