/*
  NON CONSTRUCTIBLE CHANGE
  
  Given an array of positive integers representing the values of coins in your
  possession, write a function that returns the minimum amount of change (the
  minimum sum of money) that you <b>cannot</b> create. The given coins can have
  any positive integer value and aren't necessarily unique (i.e., you can have
  multiple coins of the same value).

  For example, if you're given <span>coins = [1, 2, 5]</span>, the minimum
  amount of change that you can't create is <span>4</span>. If you're given no
  coins, the minimum amount of change that you can't create is <span>1</span>.

  Sample Input
  coins = [5, 7, 1, 1, 2, 3, 22]

  Sample Output
  20
*/

function nonConstructibleChange(coins) {
  coins.sort((a, b) => a - b)

  let currentChange = 0

  for (const coin of coins) {
    if (coin > currentChange + 1) {
      // Si encontramos un número mayor que el rango alcanzable más 1, retornamos ese valor.
      return currentChange + 1
    }

    // Extendemos el rango alcanzable.
    currentChange += coin
  }

  // Si todos los números en el array son menores o iguales al rango alcanzable más 1,
  // entonces el rango alcanzable más 1 es la respuesta.
  return currentChange + 1
}

const coins = [5, 7, 1, 1, 2, 3, 22]
// const coins = [1, 1, 1, 1, 1]
// const coins = [1, 5, 1, 1, 1, 10, 15, 20, 100]
// const coins = [6, 4, 5, 1, 1, 8, 9]
// const coins = []
// const coins = [87]
// const coins = [2]

nonConstructibleChange(coins)

